<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{6F39161D-7428-409B-818A-79A8869E36E0}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
    <Platform>x64</Platform>
    <ProjectName>melanoma_cancer</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
    <Import Project="$(VCTargetsPath)\BuildCustomizations\CUDA 12.5.props" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">mnist.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">mnist</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">bin\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">mnist</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">mnist.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">mnist</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">mnist.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">mnist</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</GenerateManifest>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>../../opennn;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>
      </ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <UseFullPaths>false</UseFullPaths>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);__Cpp11__;CMAKE_INTDIR="Debug";_HAS_STD_BYTE=0;WIN32_LEAN_AND_MEAN</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_DEBUG;__Cpp11__;CMAKE_INTDIR=\"Debug\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\opennn\Debug\opennn.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;cublas.lib;cuda.lib;cudart.lib;cudnn.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\lib\x64;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>Debug/mnist.lib</ImportLibrary>
      <ProgramDataBaseFile>Debug/mnist.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <Profile>false</Profile>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>../../opennn;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <OpenMPSupport>true</OpenMPSupport>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <UseFullPaths>false</UseFullPaths>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);NDEBUG;__Cpp11__;CMAKE_INTDIR="Release";_HAS_STD_BYTE=0;WIN32_LEAN_AND_MEAN</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions2</EnableEnhancedInstructionSet>
      <OpenMP>GenerateParallelCode</OpenMP>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <InterproceduralOptimization>MultiFile</InterproceduralOptimization>
      <OptimizeForWindowsApplication>true</OptimizeForWindowsApplication>
      <PGOUsePreTrainedModel>true</PGOUsePreTrainedModel>
      <GenerateAlternateCodePaths>AVX2</GenerateAlternateCodePaths>
      <UseProcessorExtensions>AVX2</UseProcessorExtensions>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;NDEBUG;__Cpp11__;CMAKE_INTDIR=\"Release\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\opennn\Release\opennn.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;cublas.lib;cuda.lib;cudart.lib;cudnn.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\lib\x64;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>Release/mnist.lib</ImportLibrary>
      <ProgramDataBaseFile>Release/mnist.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <Profile>false</Profile>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>../../opennn;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <ExceptionHandling>
      </ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <UseFullPaths>false</UseFullPaths>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);NDEBUG;__Cpp11__;CMAKE_INTDIR="MinSizeRel";_HAS_STD_BYTE=0;WIN32_LEAN_AND_MEAN</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;NDEBUG;__Cpp11__;CMAKE_INTDIR=\"MinSizeRel\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\opennn\MinSizeRel\opennn.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;cublas.lib;cuda.lib;cudart.lib;cudnn.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\lib\x64;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>MinSizeRel/mnist.lib</ImportLibrary>
      <ProgramDataBaseFile>MinSizeRel/mnist.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <Profile>false</Profile>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>../../opennn;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>
      </ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <UseFullPaths>false</UseFullPaths>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);NDEBUG;__Cpp11__;CMAKE_INTDIR="RelWithDebInfo";_HAS_STD_BYTE=0;WIN32_LEAN_AND_MEAN</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;NDEBUG;__Cpp11__;CMAKE_INTDIR=\"RelWithDebInfo\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>../../opennn;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>..\..\opennn\RelWithDebInfo\opennn.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;cublas.lib;cuda.lib;cudart.lib;cudnn.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.5\lib\x64;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>RelWithDebInfo/mnist.lib</ImportLibrary>
      <ProgramDataBaseFile>RelWithDebInfo/mnist.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <Profile>false</Profile>
    </Link>
    <CudaCompile>
      <TargetMachinePlatform>64</TargetMachinePlatform>
    </CudaCompile>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\opennn\opennn.vcxproj">
      <Project>{D2F8B8A4-FD55-3AA3-B597-C6BCD3D1344B}</Project>
      <Name>opennn</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="..\..\opennn\adaptive_moment_estimation.cpp" />
    <ClCompile Include="..\..\opennn\addition_layer.cpp" />
    <ClCompile Include="..\..\opennn\bounding_layer.cpp" />
    <ClCompile Include="..\..\opennn\convolutional_layer.cpp" />
    <ClCompile Include="..\..\opennn\correlations.cpp" />
    <ClCompile Include="..\..\opennn\cross_entropy_error.cpp" />
    <ClCompile Include="..\..\opennn\cross_entropy_error_3d.cpp" />
    <ClCompile Include="..\..\opennn\dataset.cpp" />
    <ClCompile Include="..\..\opennn\dense_layer.cpp" />
    <ClCompile Include="..\..\opennn\dense_layer_3d.cpp" />
    <ClCompile Include="..\..\opennn\embedding_layer.cpp" />
    <ClCompile Include="..\..\opennn\flatten_layer.cpp" />
    <ClCompile Include="..\..\opennn\genetic_algorithm.cpp" />
    <ClCompile Include="..\..\opennn\growing_inputs.cpp" />
    <ClCompile Include="..\..\opennn\growing_neurons.cpp" />
    <ClCompile Include="..\..\opennn\images.cpp" />
    <ClCompile Include="..\..\opennn\image_dataset.cpp" />
    <ClCompile Include="..\..\opennn\inputs_selection.cpp" />
    <ClCompile Include="..\..\opennn\kmeans.cpp" />
    <ClCompile Include="..\..\opennn\language_dataset.cpp" />
    <ClCompile Include="..\..\opennn\layer.cpp" />
    <ClCompile Include="..\..\opennn\levenberg_marquardt_algorithm.cpp" />
    <ClCompile Include="..\..\opennn\loss_index.cpp" />
    <ClCompile Include="..\..\opennn\mean_squared_error.cpp" />
    <ClCompile Include="..\..\opennn\minkowski_error.cpp" />
    <ClCompile Include="..\..\opennn\model_expression.cpp" />
    <ClCompile Include="..\..\opennn\model_selection.cpp" />
    <ClCompile Include="..\..\opennn\multihead_attention_layer.cpp" />
    <ClCompile Include="..\..\opennn\neural_network.cpp" />
    <ClCompile Include="..\..\opennn\neurons_selection.cpp" />
    <ClCompile Include="..\..\opennn\normalization_layer_3d.cpp" />
    <ClCompile Include="..\..\opennn\normalized_squared_error.cpp" />
    <ClCompile Include="..\..\opennn\optimization_algorithm.cpp" />
    <ClCompile Include="..\..\opennn\pch.cpp" />
    <ClCompile Include="..\..\opennn\pooling_layer.cpp" />
    <ClCompile Include="..\..\opennn\pooling_layer_3d.cpp" />
    <ClCompile Include="..\..\opennn\probabilistic_layer_3d.cpp" />
    <ClCompile Include="..\..\opennn\quasi_newton_method.cpp" />
    <ClCompile Include="..\..\opennn\recurrent_layer.cpp" />
    <ClCompile Include="..\..\opennn\registry.cpp" />
    <ClCompile Include="..\..\opennn\response_optimization.cpp" />
    <ClCompile Include="..\..\opennn\scaling.cpp" />
    <ClCompile Include="..\..\opennn\scaling_layer_2d.cpp" />
    <ClCompile Include="..\..\opennn\scaling_layer_3d.cpp" />
    <ClCompile Include="..\..\opennn\scaling_layer_4d.cpp" />
    <ClCompile Include="..\..\opennn\statistics.cpp" />
    <ClCompile Include="..\..\opennn\stochastic_gradient_descent.cpp" />
    <ClCompile Include="..\..\opennn\strings_utilities.cpp" />
    <ClCompile Include="..\..\opennn\tensors.cpp" />
    <ClCompile Include="..\..\opennn\testing_analysis.cpp" />
    <ClCompile Include="..\..\opennn\time_series_dataset.cpp" />
    <ClCompile Include="..\..\opennn\tinyxml2.cpp" />
    <ClCompile Include="..\..\opennn\training_strategy.cpp" />
    <ClCompile Include="..\..\opennn\transformer.cpp" />
    <ClCompile Include="..\..\opennn\unscaling_layer.cpp" />
    <ClCompile Include="..\..\opennn\vgg16.cpp" />
    <ClCompile Include="..\..\opennn\weighted_squared_error.cpp" />
    <ClCompile Include="main.cpp" />
  </ItemGroup>
  <ItemGroup>
    <CudaCompile Include="..\..\opennn\kernel.cu" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\..\opennn\adaptive_moment_estimation.h" />
    <ClInclude Include="..\..\opennn\addition_layer.h" />
    <ClInclude Include="..\..\opennn\bounding_layer.h" />
    <ClInclude Include="..\..\opennn\convolutional_layer.h" />
    <ClInclude Include="..\..\opennn\correlations.h" />
    <ClInclude Include="..\..\opennn\cross_entropy_error.h" />
    <ClInclude Include="..\..\opennn\cross_entropy_error_3d.h" />
    <ClInclude Include="..\..\opennn\dataset.h" />
    <ClInclude Include="..\..\opennn\dense_layer.h" />
    <ClInclude Include="..\..\opennn\dense_layer_3d.h" />
    <ClInclude Include="..\..\opennn\embedding_layer.h" />
    <ClInclude Include="..\..\opennn\flatten_layer.h" />
    <ClInclude Include="..\..\opennn\genetic_algorithm.h" />
    <ClInclude Include="..\..\opennn\growing_inputs.h" />
    <ClInclude Include="..\..\opennn\growing_neurons.h" />
    <ClInclude Include="..\..\opennn\images.h" />
    <ClInclude Include="..\..\opennn\image_dataset.h" />
    <ClInclude Include="..\..\opennn\inputs_selection.h" />
    <ClInclude Include="..\..\opennn\kernel.cuh" />
    <ClInclude Include="..\..\opennn\kmeans.h" />
    <ClInclude Include="..\..\opennn\language_dataset.h" />
    <ClInclude Include="..\..\opennn\layer.h" />
    <ClInclude Include="..\..\opennn\levenberg_marquardt_algorithm.h" />
    <ClInclude Include="..\..\opennn\loss_index.h" />
    <ClInclude Include="..\..\opennn\mean_squared_error.h" />
    <ClInclude Include="..\..\opennn\minkowski_error.h" />
    <ClInclude Include="..\..\opennn\model_expression.h" />
    <ClInclude Include="..\..\opennn\model_selection.h" />
    <ClInclude Include="..\..\opennn\multihead_attention_layer.h" />
    <ClInclude Include="..\..\opennn\neural_network.h" />
    <ClInclude Include="..\..\opennn\neurons_selection.h" />
    <ClInclude Include="..\..\opennn\normalization_layer_3d.h" />
    <ClInclude Include="..\..\opennn\normalized_squared_error.h" />
    <ClInclude Include="..\..\opennn\optimization_algorithm.h" />
    <ClInclude Include="..\..\opennn\pch.h" />
    <ClInclude Include="..\..\opennn\pooling_layer.h" />
    <ClInclude Include="..\..\opennn\pooling_layer_3d.h" />
    <ClInclude Include="..\..\opennn\probabilistic_layer_3d.h" />
    <ClInclude Include="..\..\opennn\quasi_newton_method.h" />
    <ClInclude Include="..\..\opennn\recurrent_layer.h" />
    <ClInclude Include="..\..\opennn\registry.h" />
    <ClInclude Include="..\..\opennn\response_optimization.h" />
    <ClInclude Include="..\..\opennn\scaling.h" />
    <ClInclude Include="..\..\opennn\scaling_layer_2d.h" />
    <ClInclude Include="..\..\opennn\scaling_layer_3d.h" />
    <ClInclude Include="..\..\opennn\scaling_layer_4d.h" />
    <ClInclude Include="..\..\opennn\standard_networks.h" />
    <ClInclude Include="..\..\opennn\statistics.h" />
    <ClInclude Include="..\..\opennn\stochastic_gradient_descent.h" />
    <ClInclude Include="..\..\opennn\strings_utilities.h" />
    <ClInclude Include="..\..\opennn\tensors.h" />
    <ClInclude Include="..\..\opennn\testing_analysis.h" />
    <ClInclude Include="..\..\opennn\time_series_dataset.h" />
    <ClInclude Include="..\..\opennn\tinyxml2.h" />
    <ClInclude Include="..\..\opennn\training_strategy.h" />
    <ClInclude Include="..\..\opennn\transformer.h" />
    <ClInclude Include="..\..\opennn\unscaling_layer.h" />
    <ClInclude Include="..\..\opennn\vgg16.h" />
    <ClInclude Include="..\..\opennn\weighted_squared_error.h" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
  <ImportGroup Label="ExtensionTargets">
    <Import Project="$(VCTargetsPath)\BuildCustomizations\CUDA 12.5.targets" />
  </ImportGroup>
</Project>